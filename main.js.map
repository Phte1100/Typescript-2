{"mappings":"ACCE,cAAc;AAGP,MAAM;IAGX,aAAc;aAFN,QAAiB,EAAE;QAGzB,IAAI,CAAC,oBAAoB;IAC3B;IAEO,QAAQ,IAAY,EAAE,QAAyB,EAAW;QAC/D,IAAI,SAAS,MAAM,CAAC;YAAC;YAAK;YAAK;SAAI,CAAC,QAAQ,CAAC,WAAW,OAAO;QAE/D,MAAM,UAAiB;kBAAE;YAAM,WAAW;sBAAO;QAAS;QAC1D,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;QAChB,IAAI,CAAC,kBAAkB;QACvB,OAAO;IACT;IAEO,kBAAkB,KAAa,EAAQ;QAC5C,IAAI,SAAS,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;YAC3C,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,GAAG;YAC9B,IAAI,CAAC,kBAAkB;QACzB;IACF;IAEO,WAAoB;QACzB,OAAO,IAAI,CAAC,KAAK;IACnB;IAEO,aAAmB;QACxB,IAAI,CAAC,KAAK,GAAG,EAAE;QACf,IAAI,CAAC,kBAAkB;IACzB;IAEQ,qBAA2B;QACjC,aAAa,OAAO,CAAC,SAAS,KAAK,SAAS,CAAC,IAAI,CAAC,KAAK;IACzD;IAEQ,uBAA6B;QACnC,MAAM,cAAc,aAAa,OAAO,CAAC;QACzC,IAAI,aAAa,IAAI,CAAC,KAAK,GAAG,KAAK,KAAK,CAAC;IAC3C;AACF;;;ADzCF,SAAS,gBAAgB,CAAC,oBAAoB;IAC5C,MAAM,WAAW,IAAI,CAAA,GAAA,yCAAO;IAC5B;IACA;IAEA,SAAS;QACP,MAAM,OAAO,SAAS,cAAc,CAAC;IACrC,2DAA2D;IAC7D;IAEA,SAAS;QACP,MAAM,QAAQ,SAAS,QAAQ;IAC/B,0BAA0B;IAC5B;IAEA,SAAS,gBAAgB,KAAY;QACnC,MAAM,cAAc;QACpB,8DAA8D;QAC9D;IACF;AAEA,kEAAkE;AACpE","sources":["main.ts","TodoList.ts"],"sourcesContent":["import { TodoList } from \"./TodoList\";\r\nimport { ITodo } from \"./ITodo\";\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  const todoList = new TodoList();\r\n  initializeForm();\r\n  displayTodos();\r\n\r\n  function initializeForm(): void {\r\n    const form = document.getElementById('todo-form') as HTMLFormElement;\r\n    // Binda händelser till formuläret för att lägga till todos\r\n  }\r\n\r\n  function displayTodos(): void {\r\n    const todos = todoList.getTodos();\r\n    // Visa todos i #todo-list\r\n  }\r\n\r\n  function addTodoFromForm(event: Event): void {\r\n    event.preventDefault();\r\n    // Hämta data från formuläret och använd todoList.addTodo(...)\r\n    displayTodos();\r\n  }\r\n\r\n  // Ytterligare funktioner för att hantera användarinteraktioner...\r\n});\r\n","\r\n  // TodoList.ts\r\n  import { ITodo } from \"./ITodo\";\r\n  \r\n  export class TodoList {\r\n    private todos: ITodo[] = [];\r\n  \r\n    constructor() {\r\n      this.loadFromLocalStorage();\r\n    }\r\n  \r\n    public addTodo(task: string, priority: '1' | '2' | '3'): boolean {\r\n      if (task === '' || !['1', '2', '3'].includes(priority)) return false;\r\n  \r\n      const newTodo: ITodo = { task, completed: false, priority };\r\n      this.todos.push(newTodo);\r\n      this.saveToLocalStorage();\r\n      return true;\r\n    }\r\n  \r\n    public markTodoCompleted(index: number): void {\r\n      if (index >= 0 && index < this.todos.length) {\r\n        this.todos[index].completed = true;\r\n        this.saveToLocalStorage();\r\n      }\r\n    }\r\n  \r\n    public getTodos(): ITodo[] {\r\n      return this.todos;\r\n    }\r\n  \r\n    public clearTodos(): void {\r\n      this.todos = [];\r\n      this.saveToLocalStorage();\r\n    }\r\n  \r\n    private saveToLocalStorage(): void {\r\n      localStorage.setItem('todos', JSON.stringify(this.todos));\r\n    }\r\n  \r\n    private loadFromLocalStorage(): void {\r\n      const storedTodos = localStorage.getItem('todos');\r\n      if (storedTodos) this.todos = JSON.parse(storedTodos);\r\n    }\r\n  }\r\n  "],"names":[],"version":3,"file":"main.js.map"}